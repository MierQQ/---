; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Reading port file: file:///c%3A/Users/rdm/Desktop/%D0%A3%D1%87%D0%BC%D0%B0%D1%82/%D1%81%D0%B5%D0%BC%201/%D0%A1%D0%9C%D0%9F/object_model/.nrepl-port ...
; Using host:port localhost:60344 ...
; Hooking up nREPL sessions ...
; nREPL connection failed: Error: connect ECONNREFUSED 127.0.0.1:60344
; Failed connecting.
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\rdm\Desktop\Учмат\сем 1\СМП\object_model & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless & popd
; Using host:port 127.0.0.1:51147 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉object-model.core꞉>  ; Use `alt+enter` to evaluate
clj꞉object-model.core꞉> 
; Jack-in done.
clj꞉object-model.core꞉> 
3
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val 1} 0xfe9acbb] #ref[{:status :ready, :val 1} 0x354aee45]nil
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val 1} 0x359555a]
#ref[{:status :ready, :val 1} 0x242e4e54]
; Execution error (IllegalStateException) at object-model.core/eval8130 (form-init15429976516508478812.clj:307).
; No transaction running
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val 1} 0x39926697]
#ref[{:status :ready, :val 1} 0x11a5f639]
; Execution error (IllegalStateException) at object-model.core/eval8134 (form-init15429976516508478812.clj:307).
; No transaction running
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val 1} 0x5d0e3495]
#ref[{:status :ready, :val 1} 0xe944d66]
1
2
nil
clj꞉object-model.core꞉> 
java.lang.Long
clj꞉object-model.core꞉> 
java.lang.Long
clj꞉object-model.core꞉> 
java.lang.Double
clj꞉object-model.core꞉> 
java.lang.Long
clj꞉object-model.core꞉> 
java.lang.Long
clj꞉object-model.core꞉> 
clojure.lang.Ratio
clj꞉object-model.core꞉> 
assjijatrue
clj꞉object-model.core꞉> 
"jija"
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/register-method (form-init15429976516508478812.clj:303).
; Assert failed: (list? args-types)
clj꞉object-model.core꞉> 
clojure.lang.PersistentVector
clj꞉object-model.core꞉> 
true
clj꞉object-model.core꞉> 
#'object-model.core/register-method
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/register-method (form-init15429976516508478812.clj:303).
; Assert failed: (every? is-allowed-type? args-types)
clj꞉object-model.core꞉> 
generic-type
clj꞉object-model.core꞉> 
#'object-model.core/is-allowed-type?
clj꞉object-model.core꞉> 
#'object-model.core/register-method
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/register-method (form-init15429976516508478812.clj:305).
; Assert failed: (or (= :command command-query) (= :query command-query))
clj꞉object-model.core꞉> 
#'object-model.core/register-method
clj꞉object-model.core꞉> 
{a #<Ref@64290e7f: {}>}
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val {sell #ref[{:status :ready, :val {a #ref[{:status :ready, :val {}} 0x64290e7f]}} 0x2de6bad]}} 0x7872654b]
nil
clj꞉object-model.core꞉> 
#'object-model.core/register-method
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval8368/fn--8369]}}
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val {sell #ref[{:status :ready, :val {a #ref[{:status :ready, :val {b #ref[{:status :ready, :val {generic-type #ref[{:status :ready, :val {:main {:command-query :query, :function #function[object-model.core/eval8368/fn--8369]}}} 0x52e12b61]}} 0x6155de32]}} 0x64290e7f]}} 0x2de6bad]}} 0x7872654b]
nil
clj꞉object-model.core꞉> 
{generic-type
 #<Ref@52e12b61: {:main {:command-query :query, :function #function[object-model.core/eval8368/fn--8369]}}>,
 :main {:command-query :query, :function #function[object-model.core/eval8374/fn--8375]}}
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val {sell #ref[{:status :ready, :val {a #ref[{:status :ready, :val {b #ref[{:status :ready, :val {generic-type #ref[{:status :ready, :val {:main {:command-query :query, :function #function[object-model.core/eval8368/fn--8369]}}} 0x52e12b61], :main {:command-query :query, :function #function[object-model.core/eval8374/fn--8375]}}} 0x6155de32]}} 0x64290e7f]}} 0x2de6bad]}} 0x7872654b]
nil
clj꞉object-model.core꞉> 
false
clj꞉object-model.core꞉> 
(5 4 3 2 1)
clj꞉object-model.core꞉> 
11
clj꞉object-model.core꞉> 
{:type :obj, :class-name d, :super {b {:type :obj, :class-name b, :super {a {:type :obj, :class-name a, :super {}, :slots {a #ref[{:status :ready, :val a} 0x1f45b11a], b #ref[{:status :ready, :val b} 0x37296ad9], c #ref[{:status :ready, :val jija} 0x61bfcc7a]}}}, :slots {c #ref[{:status :ready, :val c} 0x4388bc47], d #ref[{:status :ready, :val d2} 0x637a38b1], e #ref[{:status :ready, :val e} 0x3c99edae]}}, c {:type :obj, :class-name c, :super {a {:type :obj, :class-name a, :super {}, :slots {a #ref[{:status :ready, :val a} 0x1f45b11a], b #ref[{:status :ready, :val b} 0x37296ad9], c #ref[{:status :ready, :val jija} 0x61bfcc7a]}}}, :slots {c #ref[{:status :ready, :val c} 0x67f3360], d #ref[{:status :ready, :val d} 0x5e2726ea], f #ref[{:status :ready, :val f} 0x568f85ef]}}}, :slots {c #ref[{:status :ready, :val ckon} 0x20f18258], g #ref[{:status :ready, :val g} 0x2e8368c2], h #ref[{:status :ready, :val h} 0x2b9e0e57]}}nil
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name d,
 :super
 {b
  {:type :obj,
   :class-name b,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@1f45b11a: "a">, b #<Ref@37296ad9: "b">, c #<Ref@61bfcc7a: "jija">}}},
   :slots {c #<Ref@4388bc47: "c">, d #<Ref@637a38b1: "d2">, e #<Ref@3c99edae: "e">}},
  c
  {:type :obj,
   :class-name c,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@1f45b11a: "a">, b #<Ref@37296ad9: "b">, c #<Ref@61bfcc7a: "jija">}}},
   :slots {c #<Ref@67f3360: "c">, d #<Ref@5e2726ea: "d">, f #<Ref@568f85ef: "f">}}},
 :slots {c #<Ref@20f18258: "ckon">, g #<Ref@2e8368c2: "g">, h #<Ref@2b9e0e57: "h">}}
clj꞉object-model.core꞉> 
(:a)
clj꞉object-model.core꞉> 
(:a :c)
clj꞉object-model.core꞉> 
#'object-model.core/copy-object
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name d,
 :super
 {b
  {:type :obj,
   :class-name b,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@1f45b11a: "a">, b #<Ref@37296ad9: "b">, c #<Ref@61bfcc7a: "jija">}}},
   :slots {c #<Ref@4388bc47: "c">, d #<Ref@637a38b1: "d2">, e #<Ref@3c99edae: "e">}},
  c
  {:type :obj,
   :class-name c,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@1f45b11a: "a">, b #<Ref@37296ad9: "b">, c #<Ref@61bfcc7a: "jija">}}},
   :slots {c #<Ref@67f3360: "c">, d #<Ref@5e2726ea: "d">, f #<Ref@568f85ef: "f">}}},
 :slots {c #<Ref@20f18258: "ckon">, g #<Ref@2e8368c2: "g">, h #<Ref@2b9e0e57: "h">}}
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name d,
 :super
 {b
  {:type :obj,
   :class-name b,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@470a4b4d: "a">, b #<Ref@43e460ec: "b">, c #<Ref@22a0ba73: "jija">}}},
   :slots {c #<Ref@7e7df884: "c">, d #<Ref@1ba6b293: "d2">, e #<Ref@5fd2ed5f: "e">}},
  c
  {:type :obj,
   :class-name c,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@245160de: "a">, b #<Ref@4b5f9247: "b">, c #<Ref@2737fb40: "jija">}}},
   :slots {c #<Ref@238a2f08: "c">, d #<Ref@5714fe79: "d">, f #<Ref@242380a7: "f">}}},
 :slots {c #<Ref@21d6dc7f: "ckon">, g #<Ref@6cdf4e8: "g">, h #<Ref@78220475: "h">}}
clj꞉object-model.core꞉> 
1
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
{a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (c b a),
  :slots
  {a {:type :slot, :name a, :access :public, :default nil},
   b {:type :slot, :name b, :access :public, :default nil},
   c {:type :slot, :name c, :access :public, :default nil}}}}
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
{person
 {:type :class,
  :name person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}}}
clj꞉object-model.core꞉> 
#'object-model.core/boba
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name person,
 :super {},
 :slots {name #<Ref@368934e1: "boba">, height #<Ref@4ecadf23: 180>, weight #<Ref@3e4db6f: 50>}}
clj꞉object-model.core꞉> 
{person
 {:type :class,
  :name person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}}}
clj꞉object-model.core꞉> 
#'object-model.core/boba
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name person,
 :super {},
 :slots
 {name #<Ref@15aefbeb: "boba">,
  private-defolt-slot #<Ref@420086cf: "private">,
  height #<Ref@7102647f: 180>,
  weight #<Ref@32bf3702: 50>}}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/register-method (form-init15429976516508478812.clj:314).
; Assert failed: (every? is-allowed-type? args-types)
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval9885/fn--9886]}}
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/dispatch-method (form-init15429976516508478812.clj:425).
; Assert failed: (vector? arg-vector)
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-most-specific-functions (form-init15429976516508478812.clj:407).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "function_meta" is null
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval9895/fn--9896]}}
clj꞉object-model.core꞉> 
#<Ref@61f43e13: 
  {tell-your-name-and-height
   #<Ref@3eeac528: 
     {person
      #<Ref@5fdcf1ed: {:main {:command-query :query, :function #function[object-model.core/eval9895/fn--9896]}}>}>}>
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
; 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/boba
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name person,
 :super {},
 :slots
 {name #<Ref@750a7e5e: "boba">,
  private-defolt-slot #<Ref@798beaae: "private">,
  height #<Ref@108f3b58: 180>,
  weight #<Ref@1dde44de: 50>}}
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10069/fn--10070]}}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-most-specific-functions (form-init15429976516508478812.clj:407).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "function_meta" is null
clj꞉object-model.core꞉> 
#<Ref@411fd605: 
  {tell-your-name-and-height
   #<Ref@7d24625f: 
     {person
      #<Ref@494c0680: {:main {:command-query :query, :function #function[object-model.core/eval10069/fn--10070]}}>}>}>
clj꞉object-model.core꞉> 
#'object-model.core/get-most-specific-functions
clj꞉object-model.core꞉> 
#ref[{:status :ready, :val {:main {:command-query :query, :function #function[object-model.core/eval10069/fn--10070]}}} 0x494c0680]; Execution error (NullPointerException) at object-model.core/get-most-specific-functions (form-init15429976516508478812.clj:408).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "function_meta" is null
clj꞉object-model.core꞉> 
#'object-model.core/get-most-specific-functions
clj꞉object-model.core꞉> 
; Error printing return value (ClassCastException) at object-model.core/eval10069$fn (form-init15429976516508478812.clj:483).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10183/fn--10184]}}
clj꞉object-model.core꞉> 
boba 180(nil)
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10193/fn--10194]}}
clj꞉object-model.core꞉> 
boba 180
(nil)
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
boba 180
nil
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
{person
 {:type :class,
  :name person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}}}
clj꞉object-model.core꞉> 
#<Ref@72b6164f: 
  {person
   {:type :class,
    :name person,
    :parents (),
    :public-slots (name),
    :slots
    {name {:type :slot, :name name, :access :public, :default nil},
     private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
     height {:type :slot, :name height, :access :private, :default nil},
     weight {:type :slot, :name weight, :access :private, :default nil}}}}>
clj꞉object-model.core꞉> 
#'object-model.core/boba
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name person,
 :super {},
 :slots
 {name #<Ref@4da24269: "boba">,
  private-defolt-slot #<Ref@466d823f: "private">,
  height #<Ref@2c9aa31a: 180>,
  weight #<Ref@5a85a3b0: 50>}}
clj꞉object-model.core꞉> 
"boba"
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval10509/fn--10510]}}
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10515/fn--10516]}}
clj꞉object-model.core꞉> 
{:after {:command-query :query, :function #function[object-model.core/eval10521/fn--10522]}}
clj꞉object-model.core꞉> 
#<Ref@73bbbce9: 
  {print-height
   #<Ref@661d6d12: 
     {person
      #<Ref@2f80ce7a: 
        {:before {:command-query :query, :function #function[object-model.core/eval10509/fn--10510]}}>}>,
   print-name
   #<Ref@2bf22ff9: 
     {person
      #<Ref@5006d973: {:main {:command-query :query, :function #function[object-model.core/eval10515/fn--10516]}}>}>,
   print-weight
   #<Ref@ad8d838: 
     {person
      #<Ref@7f767f97: {:after {:command-query :query, :function #function[object-model.core/eval10521/fn--10522]}}>}>}>
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/dispatch-method (form-init15429976516508478812.clj:426).
; Assert failed: (is-method-name-exist? method-name)
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10540/fn--10541]},
 :before {:command-query :query, :function #function[object-model.core/eval10535/fn--10536]},
 :after {:command-query :query, :function #function[object-model.core/eval10545/fn--10546]}}
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/dispatch-method (form-init15429976516508478812.clj:426).
; Assert failed: (is-method-name-exist? method-name)
clj꞉object-model.core꞉> 
boba
nil
clj꞉object-model.core꞉> 
#<Ref@73bbbce9: 
  {print-height
   #<Ref@661d6d12: 
     {person
      #<Ref@2f80ce7a: 
        {:before {:command-query :query, :function #function[object-model.core/eval10509/fn--10510]}}>}>,
   print-name
   #<Ref@2bf22ff9: 
     {person
      #<Ref@5006d973: 
        {:main {:command-query :query, :function #function[object-model.core/eval10540/fn--10541]},
         :before {:command-query :query, :function #function[object-model.core/eval10535/fn--10536]},
         :after {:command-query :query, :function #function[object-model.core/eval10545/fn--10546]}}>}>,
   print-weight
   #<Ref@ad8d838: 
     {person
      #<Ref@7f767f97: {:after {:command-query :query, :function #function[object-model.core/eval10521/fn--10522]}}>}>}>
clj꞉object-model.core꞉> 
boba
nil
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10540/fn--10541]},
 :before {:command-query :query, :function #function[object-model.core/eval10557/fn--10558]},
 :after {:command-query :query, :function #function[object-model.core/eval10545/fn--10546]}}
clj꞉object-model.core꞉> 
boba
nil
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
boba
(#function[clojure.core/partial/fn--5908])(#function[clojure.core/partial/fn--5908])nil
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
boba
(180
nil)(50
nil)nil
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
180
boba
50
nil
clj꞉object-model.core꞉> 
{person
 {:type :class,
  :name person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}},
 not-a-person
 {:type :class,
  :name not-a-person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}}}
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval10719/fn--10720]}}
clj꞉object-model.core꞉> 
180
boba
50
nil
clj꞉object-model.core꞉> 
"jija"
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
"jija"
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
"g"
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name d,
 :super
 {b
  {:type :obj,
   :class-name b,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@5427bd0a: "a">, b #<Ref@2a7b71d: "b">, c #<Ref@2b4e6758: "jija">}}},
   :slots {c #<Ref@2696ff37: "c">, d #<Ref@61985364: "d2">, e #<Ref@134452a3: "e">}},
  c
  {:type :obj,
   :class-name c,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@5427bd0a: "a">, b #<Ref@2a7b71d: "b">, c #<Ref@2b4e6758: "jija">}}},
   :slots {c #<Ref@15ef0eb8: "c">, d #<Ref@6a90a21d: "d">, f #<Ref@2734d45b: "f">}}},
 :slots {c #<Ref@22d3dcef: "ckon">, g #<Ref@5b9b01c: "g">, h #<Ref@3de86c77: "h">}}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
"jija"
clj꞉object-model.core꞉> 
; Execution error (ArityException) at object-model.core/eval10745 (form-init15429976516508478812.clj:557).
; Wrong number of args (1) passed to: object-model.core/get-object-slot
clj꞉object-model.core꞉> 
{a [true #<Ref@5427bd0a: "a">], b [false nil], c [false nil], d [false nil]}
clj꞉object-model.core꞉> 
{a [true #<Ref@2b4e6758: "jija">],
 b [true #<Ref@2696ff37: "c">],
 c [true #<Ref@15ef0eb8: "c">],
 d [false #<Ref@22d3dcef: "ckon">]}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
"g"
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
{a [false nil], b [true #<Ref@61985364: "d2">], c [true #<Ref@6a90a21d: "d">], d [false nil]}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
; 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
; 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
; 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
; 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
{person
 {:type :class,
  :name person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}},
 not-a-person
 {:type :class,
  :name not-a-person,
  :parents (),
  :public-slots (name),
  :slots
  {name {:type :slot, :name name, :access :public, :default nil},
   private-defolt-slot {:type :slot, :name private-defolt-slot, :access :private, :default "private"},
   height {:type :slot, :name height, :access :private, :default nil},
   weight {:type :slot, :name weight, :access :private, :default nil}}}}
clj꞉object-model.core꞉> 

clj꞉object-model.core꞉> 
#'object-model.core/obj
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name d,
 :super
 {b
  {:type :obj,
   :class-name b,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@3141e60f: "a">, b #<Ref@1a9b81d6: "b">, c #<Ref@59080857: "c0">}}},
   :slots {c #<Ref@61fb4888: "c">, d #<Ref@78c558d1: "d2">, e #<Ref@7faaa92a: "e">}},
  c
  {:type :obj,
   :class-name c,
   :super
   {a
    {:type :obj,
     :class-name a,
     :super {},
     :slots {a #<Ref@3141e60f: "a">, b #<Ref@1a9b81d6: "b">, c #<Ref@59080857: "c0">}}},
   :slots {c #<Ref@6565e162: "c">, d #<Ref@22f236ef: "d">, f #<Ref@71cdefcb: "f">}}},
 :slots {c #<Ref@7cf63f14: "ckon">, g #<Ref@29ae008a: "g">, h #<Ref@59b5ddaf: "h">}}
clj꞉object-model.core꞉> 
{a [false nil], b [true #<Ref@78c558d1: "d2">], c [true #<Ref@22f236ef: "d">], d [false nil]}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
{a [false nil], b [true #<Ref@78c558d1: "d2">], c [true #<Ref@22f236ef: "d">], d [false nil]}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
(d b c a)
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
[false nil]
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:219).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val d2} 0x78c558d1]]
"d2"
clj꞉object-model.core꞉> 
(d b c a)
clj꞉object-model.core꞉> 
{a [false nil], b [true #<Ref@78c558d1: "d2">], c [true #<Ref@22f236ef: "d">], d [false nil]}
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/slot (form-init15429976516508478812.clj:52).
; Assert failed: (or (= :private access-type) (= :public access-type))
clj꞉object-model.core꞉> 
{base
 {:type :class,
  :name base,
  :parents (),
  :public-slots (base-override-3 base-override-2 base-override-1 base-exclude defining),
  :slots
  {base-private-override-1
   {:type :slot, :name base-private-override-1, :access :private, :default "base-private-override-1"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :private, :default "base-private-override-2"},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "base-override-2"},
   base-exclude {:type :slot, :name base-exclude, :access :public, :default "base-exclude"},
   base-private-exclude {:type :slot, :name base-private-exclude, :access :private, :default "base-private-exclude"},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "base-override-1"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :private, :default "base-private-override-3"},
   defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "base-override-3"}}},
 child-1
 {:type :class,
  :name child-1,
  :parents (base),
  :public-slots (child-override base-private-override-1 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-override-1"},
   base-private-override-1
   {:type :slot, :name base-private-override-1, :access :public, :default "child-private-override-1"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-1-child"}}},
 child-2
 {:type :class,
  :name child-2,
  :parents (base),
  :public-slots (child-2-exclude child-override base-private-override-2 base-override-2 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "child-override-2"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :public, :default "child-private-override-2"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-2-child"},
   child-2-exclude {:type :slot, :name child-2-exclude, :access :public, :default "child-2-exclude"}}}}
clj꞉object-model.core꞉> 
{base
 {:type :class,
  :name base,
  :parents (),
  :public-slots (base-override-3 base-override-2 base-override-1 base-exclude defining),
  :slots
  {base-private-override-1
   {:type :slot, :name base-private-override-1, :access :private, :default "base-private-override-1"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :private, :default "base-private-override-2"},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "base-override-2"},
   base-exclude {:type :slot, :name base-exclude, :access :public, :default "base-exclude"},
   base-private-exclude {:type :slot, :name base-private-exclude, :access :private, :default "base-private-exclude"},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "base-override-1"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :private, :default "base-private-override-3"},
   defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "base-override-3"}}},
 child-1
 {:type :class,
  :name child-1,
  :parents (base),
  :public-slots (child-override base-private-override-1 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-override-1"},
   base-private-override-1
   {:type :slot, :name base-private-override-1, :access :public, :default "child-private-override-1"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-1-child"}}},
 child-2
 {:type :class,
  :name child-2,
  :parents (base),
  :public-slots (child-2-exclude child-override base-private-override-2 base-override-2 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "child-override-2"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :public, :default "child-private-override-2"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-2-child"},
   child-2-exclude {:type :slot, :name child-2-exclude, :access :public, :default "child-2-exclude"}}}}
clj꞉object-model.core꞉> 
{base
 {:type :class,
  :name base,
  :parents (),
  :public-slots (base-override-3 base-override-2 base-override-1 base-exclude defining),
  :slots
  {base-private-override-1
   {:type :slot, :name base-private-override-1, :access :private, :default "base-private-override-1"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :private, :default "base-private-override-2"},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "base-override-2"},
   base-exclude {:type :slot, :name base-exclude, :access :public, :default "base-exclude"},
   base-private-exclude {:type :slot, :name base-private-exclude, :access :private, :default "base-private-exclude"},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "base-override-1"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :private, :default "base-private-override-3"},
   defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "base-override-3"}}},
 child-1
 {:type :class,
  :name child-1,
  :parents (base),
  :public-slots (child-override base-private-override-1 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-override-1"},
   base-private-override-1
   {:type :slot, :name base-private-override-1, :access :public, :default "child-private-override-1"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-1-child"}}},
 child-2
 {:type :class,
  :name child-2,
  :parents (base),
  :public-slots (child-2-exclude child-override base-private-override-2 base-override-2 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "child-override-2"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :public, :default "child-private-override-2"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-2-child"},
   child-2-exclude {:type :slot, :name child-2-exclude, :access :public, :default "child-2-exclude"}}}}
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/slot (form-init15429976516508478812.clj:52).
; Assert failed: (or (= :private access-type) (= :public access-type))
clj꞉object-model.core꞉> 
{base
 {:type :class,
  :name base,
  :parents (),
  :public-slots (base-override-3 base-override-2 base-override-1 base-exclude defining),
  :slots
  {base-private-override-1
   {:type :slot, :name base-private-override-1, :access :private, :default "base-private-override-1"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :private, :default "base-private-override-2"},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "base-override-2"},
   base-exclude {:type :slot, :name base-exclude, :access :public, :default "base-exclude"},
   base-private-exclude {:type :slot, :name base-private-exclude, :access :private, :default "base-private-exclude"},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "base-override-1"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :private, :default "base-private-override-3"},
   defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "base-override-3"}}},
 child-1
 {:type :class,
  :name child-1,
  :parents (base),
  :public-slots (child-override base-private-override-1 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-override-1"},
   base-private-override-1
   {:type :slot, :name base-private-override-1, :access :public, :default "child-private-override-1"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-1-child"}}},
 child-2
 {:type :class,
  :name child-2,
  :parents (base),
  :public-slots (child-2-exclude child-override base-private-override-2 base-override-2 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "child-override-2"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :public, :default "child-private-override-2"},
   child-override {:type :slot, :name child-override, :access :public, :default "child-override-2-child"},
   child-2-exclude {:type :slot, :name child-2-exclude, :access :public, :default "child-2-exclude"}}},
 child-child
 {:type :class,
  :name child-child,
  :parents (child-1 child-2),
  :public-slots (child-child base-private-override-3 base-override-3 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-child-override-1"},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "child-override-child"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :public, :default "child-private-override-1"},
   child-child {:type :slot, :name child-child, :access :public, :default "child-child"}}}}
clj꞉object-model.core꞉> 
#'object-model.core/cc
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name child-child,
 :super
 {child-1
  {:type :obj,
   :class-name child-1,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@2165c111: "base-private-override-1">,
      base-private-override-2 #<Ref@225b1057: "base-private-override-2">,
      base-override-2 #<Ref@27dcec17: "base-override-2">,
      base-exclude #<Ref@2b0e56de: "base-exclude">,
      base-private-exclude #<Ref@5140ad54: "base-private-exclude">,
      base-override-1 #<Ref@6e82fafe: "base-override-1">,
      base-private-override-3 #<Ref@1ccb98e0: "base-private-override-3">,
      defining #<Ref@1147dda: "base defining">,
      base-override-3 #<Ref@17a5ee6c: "base-override-3">}}},
   :slots
   {defining #<Ref@542c9f3b: "defining">,
    base-override-1 #<Ref@5342cb57: "child-override-1">,
    base-private-override-1 #<Ref@2131d41e: "child-private-override-1">,
    child-override #<Ref@5a30a03c: "child-override-1-child">}},
  child-2
  {:type :obj,
   :class-name child-2,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@2165c111: "base-private-override-1">,
      base-private-override-2 #<Ref@225b1057: "base-private-override-2">,
      base-override-2 #<Ref@27dcec17: "base-override-2">,
      base-exclude #<Ref@2b0e56de: "base-exclude">,
      base-private-exclude #<Ref@5140ad54: "base-private-exclude">,
      base-override-1 #<Ref@6e82fafe: "base-override-1">,
      base-private-override-3 #<Ref@1ccb98e0: "base-private-override-3">,
      defining #<Ref@1147dda: "base defining">,
      base-override-3 #<Ref@17a5ee6c: "base-override-3">}}},
   :slots
   {defining #<Ref@723c3eea: "child-2 defining">,
    base-override-2 #<Ref@7527d304: "child-override-2">,
    base-private-override-2 #<Ref@1faba62c: "child-private-override-2">,
    child-override #<Ref@3f99e33b: "child-override-2-child">,
    child-2-exclude #<Ref@23a46706: "child-2-exclude">}}},
 :slots
 {defining #<Ref@3483c00d: "defining">,
  base-override-1 #<Ref@750e58c5: "child-child-override-1">,
  base-override-3 #<Ref@22c5ae63: "child-override-child">,
  base-private-override-3 #<Ref@6c42c6f8: "child-private-override-1">,
  child-child #<Ref@54959922: "child-child">}}
clj꞉object-model.core꞉> 
"defining"
clj꞉object-model.core꞉> 
"base defining"
clj꞉object-model.core꞉> 
"defining"
clj꞉object-model.core꞉> 
"child-2 defining"
clj꞉object-model.core꞉> 
"defining"
clj꞉object-model.core꞉> 
"base-exclude"
clj꞉object-model.core꞉> 
"child-child"
clj꞉object-model.core꞉> 
"child-2-exclude"
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
{base
 {:type :class,
  :name base,
  :parents (),
  :public-slots (base-override-3 base-override-2 base-override-1 base-exclude defining),
  :slots
  {base-private-override-1
   {:type :slot, :name base-private-override-1, :access :private, :default "base-private-override-1"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :private, :default "base-private-override-2"},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "base-override-2"},
   base-exclude {:type :slot, :name base-exclude, :access :public, :default "base-exclude"},
   base-private-exclude {:type :slot, :name base-private-exclude, :access :private, :default "base-private-exclude"},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "base-override-1"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :private, :default "base-private-override-3"},
   defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "base-override-3"}}},
 child-1
 {:type :class,
  :name child-1,
  :parents (base),
  :public-slots (child-inclusion base-private-override-1 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-override-1"},
   base-private-override-1
   {:type :slot, :name base-private-override-1, :access :public, :default "child-private-override-1"},
   child-inclusion {:type :slot, :name child-inclusion, :access :public, :default "child-inclusion-1-child"}}},
 child-2
 {:type :class,
  :name child-2,
  :parents (base),
  :public-slots (child-2-exclude child-inclusion base-private-override-2 base-override-2 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-2 {:type :slot, :name base-override-2, :access :public, :default "child-override-2"},
   base-private-override-2
   {:type :slot, :name base-private-override-2, :access :public, :default "child-private-override-2"},
   child-inclusion {:type :slot, :name child-inclusion, :access :public, :default "child-inclusion-2-child"},
   child-2-exclude {:type :slot, :name child-2-exclude, :access :public, :default "child-2-exclude"}}},
 child-child
 {:type :class,
  :name child-child,
  :parents (child-1 child-2),
  :public-slots (child-child base-private-override-3 base-override-3 base-override-1 defining),
  :slots
  {defining {:type :slot, :name defining, :access :public, :default nil},
   base-override-1 {:type :slot, :name base-override-1, :access :public, :default "child-child-override-1"},
   base-override-3 {:type :slot, :name base-override-3, :access :public, :default "child-override-child"},
   base-private-override-3
   {:type :slot, :name base-private-override-3, :access :public, :default "child-private-override-1"},
   child-child {:type :slot, :name child-child, :access :public, :default "child-child"}}}}
clj꞉object-model.core꞉> 
#'object-model.core/cc
clj꞉object-model.core꞉> 
"child-inclusion-1-child"
clj꞉object-model.core꞉> 
"child-inclusion-2-child"
clj꞉object-model.core꞉> 
"child-child-override-1"
clj꞉object-model.core꞉> 
"child-override-2"
clj꞉object-model.core꞉> 
"child-override-child"
clj꞉object-model.core꞉> 
"child-override-child"
clj꞉object-model.core꞉> 
"child-child-override-1"
clj꞉object-model.core꞉> 
"child-override-2"
clj꞉object-model.core꞉> 
"child-override-2"
clj꞉object-model.core꞉> 
"base-override-2"
clj꞉object-model.core꞉> 
"child-override-child"
clj꞉object-model.core꞉> 
"base-override-3"
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/set-value$fn (form-init15429976516508478812.clj:247).
; Cannot invoke "clojure.lang.Ref.alter(clojure.lang.IFn, clojure.lang.ISeq)" because "ref" is null
clj꞉object-model.core꞉> 
#'object-model.core/set-value
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/set-value$fn (form-init15429976516508478812.clj:247).
; Cannot invoke "clojure.lang.Ref.alter(clojure.lang.IFn, clojure.lang.ISeq)" because "ref" is null
clj꞉object-model.core꞉> 
#'object-model.core/set-value
clj꞉object-model.core꞉> 
nil
; Execution error (NullPointerException) at object-model.core/set-value$fn (form-init15429976516508478812.clj:248).
; Cannot invoke "clojure.lang.Ref.alter(clojure.lang.IFn, clojure.lang.ISeq)" because "ref" is null
clj꞉object-model.core꞉> 
"defining"
clj꞉object-model.core꞉> 
#'object-model.core/set-value
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val defining} 0x61744c05]]
{:type :obj,
 :class-name child-child,
 :super
 {child-1
  {:type :obj,
   :class-name child-1,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@38b42821: "defining">,
    base-override-1 #<Ref@680e87e2: "child-override-1">,
    base-private-override-1 #<Ref@10c73ba9: "child-private-override-1">,
    child-inclusion #<Ref@64816377: "child-inclusion-1-child">}},
  child-2
  {:type :obj,
   :class-name child-2,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@1fccb586: "child-2 defining">,
    base-override-2 #<Ref@65ecac28: "child-override-2">,
    base-private-override-2 #<Ref@7b114ab9: "child-private-override-2">,
    child-inclusion #<Ref@91e54f4: "child-inclusion-2-child">,
    child-2-exclude #<Ref@10e5721b: "child-2-exclude">}}},
 :slots
 {defining #<Ref@61744c05: "defining child child">,
  base-override-1 #<Ref@38bae4d3: "child-child-override-1">,
  base-override-3 #<Ref@56ccbde2: "child-override-child">,
  base-private-override-3 #<Ref@7e210dc0: "child-private-override-1">,
  child-child #<Ref@32e940bf: "child-child">}}
clj꞉object-model.core꞉> 
"defining child child"
clj꞉object-model.core꞉> 
"base defining"
clj꞉object-model.core꞉> 
"defining"
clj꞉object-model.core꞉> 
"child-2 defining"
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val defining child child} 0x61744c05]]
{:type :obj,
 :class-name child-child,
 :super
 {child-1
  {:type :obj,
   :class-name child-1,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@38b42821: "defining">,
    base-override-1 #<Ref@680e87e2: "child-override-1">,
    base-private-override-1 #<Ref@10c73ba9: "child-private-override-1">,
    child-inclusion #<Ref@64816377: "child-inclusion-1-child">}},
  child-2
  {:type :obj,
   :class-name child-2,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@1fccb586: "child-2 defining">,
    base-override-2 #<Ref@65ecac28: "child-override-2">,
    base-private-override-2 #<Ref@7b114ab9: "child-private-override-2">,
    child-inclusion #<Ref@91e54f4: "child-inclusion-2-child">,
    child-2-exclude #<Ref@10e5721b: "child-2-exclude">}}},
 :slots
 {defining #<Ref@61744c05: "defining child-1">,
  base-override-1 #<Ref@38bae4d3: "child-child-override-1">,
  base-override-3 #<Ref@56ccbde2: "child-override-child">,
  base-private-override-3 #<Ref@7e210dc0: "child-private-override-1">,
  child-child #<Ref@32e940bf: "child-child">}}
clj꞉object-model.core꞉> 
"defining child-1"
clj꞉object-model.core꞉> 
"base defining"
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val defining child-1} 0x61744c05]]
{:type :obj,
 :class-name child-child,
 :super
 {child-1
  {:type :obj,
   :class-name child-1,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@38b42821: "defining">,
    base-override-1 #<Ref@680e87e2: "child-override-1">,
    base-private-override-1 #<Ref@10c73ba9: "child-private-override-1">,
    child-inclusion #<Ref@64816377: "child-inclusion-1-child">}},
  child-2
  {:type :obj,
   :class-name child-2,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@1fccb586: "child-2 defining">,
    base-override-2 #<Ref@65ecac28: "child-override-2">,
    base-private-override-2 #<Ref@7b114ab9: "child-private-override-2">,
    child-inclusion #<Ref@91e54f4: "child-inclusion-2-child">,
    child-2-exclude #<Ref@10e5721b: "child-2-exclude">}}},
 :slots
 {defining #<Ref@61744c05: "defining child child">,
  base-override-1 #<Ref@38bae4d3: "child-child-override-1">,
  base-override-3 #<Ref@56ccbde2: "child-override-child">,
  base-private-override-3 #<Ref@7e210dc0: "child-private-override-1">,
  child-child #<Ref@32e940bf: "child-child">}}
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name child-child,
 :super
 {child-1
  {:type :obj,
   :class-name child-1,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@38b42821: "defining child-1">,
    base-override-1 #<Ref@680e87e2: "child-override-1">,
    base-private-override-1 #<Ref@10c73ba9: "child-private-override-1">,
    child-inclusion #<Ref@64816377: "child-inclusion-1-child">}},
  child-2
  {:type :obj,
   :class-name child-2,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@1fccb586: "child-2 defining">,
    base-override-2 #<Ref@65ecac28: "child-override-2">,
    base-private-override-2 #<Ref@7b114ab9: "child-private-override-2">,
    child-inclusion #<Ref@91e54f4: "child-inclusion-2-child">,
    child-2-exclude #<Ref@10e5721b: "child-2-exclude">}}},
 :slots
 {defining #<Ref@61744c05: "defining child child">,
  base-override-1 #<Ref@38bae4d3: "child-child-override-1">,
  base-override-3 #<Ref@56ccbde2: "child-override-child">,
  base-private-override-3 #<Ref@7e210dc0: "child-private-override-1">,
  child-child #<Ref@32e940bf: "child-child">}}
clj꞉object-model.core꞉> 
"defining child child"
clj꞉object-model.core꞉> 
"base defining"
clj꞉object-model.core꞉> 
"defining child-1"
clj꞉object-model.core꞉> 
"child-2 defining"
clj꞉object-model.core꞉> 
{:type :obj,
 :class-name child-child,
 :super
 {child-1
  {:type :obj,
   :class-name child-1,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@38b42821: "child-1 defining">,
    base-override-1 #<Ref@680e87e2: "child-override-1">,
    base-private-override-1 #<Ref@10c73ba9: "child-private-override-1">,
    child-inclusion #<Ref@64816377: "child-inclusion-1-child">}},
  child-2
  {:type :obj,
   :class-name child-2,
   :super
   {base
    {:type :obj,
     :class-name base,
     :super {},
     :slots
     {base-private-override-1 #<Ref@23d7a862: "base-private-override-1">,
      base-private-override-2 #<Ref@6411f3ad: "base-private-override-2">,
      base-override-2 #<Ref@1c773c34: "base-override-2">,
      base-exclude #<Ref@7b769af9: "base-exclude">,
      base-private-exclude #<Ref@6e3f54ea: "base-private-exclude">,
      base-override-1 #<Ref@179e3834: "base-override-1">,
      base-private-override-3 #<Ref@5bb1feb0: "base-private-override-3">,
      defining #<Ref@77feb95c: "base defining">,
      base-override-3 #<Ref@18fac4e9: "base-override-3">}}},
   :slots
   {defining #<Ref@1fccb586: "child-2 defining">,
    base-override-2 #<Ref@65ecac28: "child-override-2">,
    base-private-override-2 #<Ref@7b114ab9: "child-private-override-2">,
    child-inclusion #<Ref@91e54f4: "child-inclusion-2-child">,
    child-2-exclude #<Ref@10e5721b: "child-2-exclude">}}},
 :slots
 {defining #<Ref@61744c05: "defining child child">,
  base-override-1 #<Ref@38bae4d3: "child-child-override-1">,
  base-override-3 #<Ref@56ccbde2: "child-override-child">,
  base-private-override-3 #<Ref@7e210dc0: "child-private-override-1">,
  child-child #<Ref@32e940bf: "child-child">}}
clj꞉object-model.core꞉> 
"child-child"
clj꞉object-model.core꞉> 
"base-exclude"
clj꞉object-model.core꞉> 
"child-2-exclude"
clj꞉object-model.core꞉> 
"child-inclusion-1-child"
clj꞉object-model.core꞉> 
"child-inclusion-2-child"
clj꞉object-model.core꞉> 
"child-child-override-1"
clj꞉object-model.core꞉> 
"child-override-2"
clj꞉object-model.core꞉> 
"child-override-2"
clj꞉object-model.core꞉> 
"base-override-2"
clj꞉object-model.core꞉> 
"child-override-2"
clj꞉object-model.core꞉> 
"base-override-2"
clj꞉object-model.core꞉> 
"child-override-child"
clj꞉object-model.core꞉> 
"base-override-3"
clj꞉object-model.core꞉> 
"child-child-override-1"
clj꞉object-model.core꞉> 
nil
clj꞉object-model.core꞉> 
{a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (),
  :slots {a {:type :slot, :name a, :access :private, :default "a"}}},
 b
 {:type :class,
  :name b,
  :parents (a),
  :public-slots (),
  :slots {b {:type :slot, :name b, :access :private, :default "b"}}},
 c
 {:type :class,
  :name c,
  :parents (b),
  :public-slots (),
  :slots
  {b {:type :slot, :name b, :access :private, :default "c's b"},
   c {:type :slot, :name c, :access :private, :default "c"}}}}
clj꞉object-model.core꞉> 
{a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (),
  :slots {a {:type :slot, :name a, :access :private, :default "a"}}},
 b
 {:type :class,
  :name b,
  :parents (a),
  :public-slots (),
  :slots {b {:type :slot, :name b, :access :private, :default "b"}}},
 c
 {:type :class,
  :name c,
  :parents (b),
  :public-slots (),
  :slots
  {b {:type :slot, :name b, :access :private, :default "c's b"},
   c {:type :slot, :name c, :access :private, :default "c"}}},
 base {:type :class, :name base, :parents (), :public-slots (), :slots {}},
 child {:type :class, :name child, :parents (base), :public-slots (), :slots {}}}
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval11995/fn--11996]},
 :main {:command-query :query, :function #function[object-model.core/eval12000/fn--12001]}}
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12041/fn--12042]},
 :main {:command-query :query, :function #function[object-model.core/eval12046/fn--12047]}}
clj꞉object-model.core꞉> 
#'object-model.core/c
clj꞉object-model.core꞉> 
#'object-model.core/c
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
{:type :obj, :class-name a, :super {}, :slots {a #<Ref@7219ebd6: "a">}}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
true nil
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
true {a [false #ref[{:status :ready, :val a} 0x7219ebd6]]}
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/get-value
clj꞉object-model.core꞉> 
true {a [false #ref[{:status :ready, :val a} 0x7219ebd6]]} (a) nil
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:218).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
#'object-model.core/set-value
clj꞉object-model.core꞉> 
true {a [false #ref[{:status :ready, :val a} 0x7219ebd6]]} (a) [false #ref[{:status :ready, :val a} 0x7219ebd6]]
a before a
true {a [false #ref[{:status :ready, :val a} 0x7219ebd6]]} (a) [false #ref[{:status :ready, :val a} 0x7219ebd6]]
a
true {a [false #ref[{:status :ready, :val a} 0x7219ebd6]]} (a) [false #ref[{:status :ready, :val a} 0x7219ebd6]]
a before a
nil
clj꞉object-model.core꞉> 
#'object-model.core/set-value
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12345/fn--12346]},
 :main {:command-query :query, :function #function[object-model.core/eval12350/fn--12351]}}
clj꞉object-model.core꞉> 
a before a
a
a after a
nil
clj꞉object-model.core꞉> 
b a before b
a before a
b a
a after a
b a after b
nil
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
a before a
c c's b b a
a after a
c's b a after b
nil
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12345/fn--12346]},
 :main {:command-query :query, :function #function[object-model.core/eval12387/fn--12388]}}
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
a before a
will call next methods
c's b a
; Execution error (NullPointerException) at object-model.core/call-next-method (form-init15429976516508478812.clj:465).
; Cannot invoke "clojure.lang.IFn.invoke()" because the return value of "clojure.lang.IFn.invoke(Object)" is null
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12345/fn--12346]},
 :main {:command-query :query, :function #function[object-model.core/eval12409/fn--12410]}}
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
a before a
will call next methods
c's b a
{:result nil, :rest (#function[clojure.core/partial/fn--5908] #function[clojure.core/partial/fn--5908])}
; Execution error (NullPointerException) at object-model.core/call-next-method (form-init15429976516508478812.clj:465).
; Cannot invoke "clojure.lang.IFn.invoke()" because the return value of "clojure.lang.IFn.invoke(Object)" is null
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
#'object-model.core/call-next-method
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
a before a
will call next methods
c's b a
{:result nil, :context (#function[clojure.core/partial/fn--5908])}
a
a after a
c's b a after b
nil
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12345/fn--12346]},
 :main {:command-query :query, :function #function[object-model.core/eval12421/fn--12422]}}
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
a before a
will call next methods
c's b a
a
a after a
c's b a after b
nil
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/dispatch-method (form-init15429976516508478812.clj:427).
; Assert failed: (vector? arg-vector)
clj꞉object-model.core꞉> 
hello world
nil
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12310/fn--12311]},
 :before {:command-query :query, :function #function[object-model.core/eval12445/fn--12446]}}
clj꞉object-model.core꞉> 
before hello world
hello world
nil
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12513/fn--12514]},
 :main {:command-query :query, :function #function[object-model.core/eval12518/fn--12519]}}
clj꞉object-model.core꞉> 
#'object-model.core/a
clj꞉object-model.core꞉> 
#'object-model.core/d
clj꞉object-model.core꞉> 
a before a
a
a after a
nil
clj꞉object-model.core꞉> 
b a before b
a before a
b a
a after a
b a after b
nil
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
d before d
a before a
c c's b b a
a after a
d after d
c's b a after b
nil
clj꞉object-model.core꞉> 
d before d
d
d after d
nil
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12513/fn--12514]},
 :main {:command-query :query, :function #function[object-model.core/eval12532/fn--12533]}}
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
d before d
a before a
will call next methods
c's b a
d
a
a after a
d after d
c's b a after b
nil
clj꞉object-model.core꞉> 
before hello world
hello world
nil
clj꞉object-model.core꞉> 
; Execution error (AssertionError) at object-model.core/make-instance (form-init15429976516508478812.clj:152).
; Assert failed: (class-registed? class-name)
clj꞉object-model.core꞉> 
{a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (),
  :slots {a {:type :slot, :name a, :access :private, :default "a"}}},
 b
 {:type :class,
  :name b,
  :parents (a),
  :public-slots (),
  :slots {b {:type :slot, :name b, :access :private, :default "b"}}},
 c
 {:type :class,
  :name c,
  :parents (b d),
  :public-slots (),
  :slots
  {b {:type :slot, :name b, :access :private, :default "c's b"},
   c {:type :slot, :name c, :access :private, :default "c"}}},
 base {:type :class, :name base, :parents (), :public-slots (), :slots {}},
 child {:type :class, :name child, :parents (base), :public-slots (), :slots {}},
 d
 {:type :class,
  :name d,
  :parents (),
  :public-slots (),
  :slots {d {:type :slot, :name d, :access :private, :default "d"}}},
 kuk {:type :class, :name kuk, :parents (), :public-slots (), :slots {}}}
clj꞉object-model.core꞉> 
#'object-model.core/kuk
clj꞉object-model.core꞉> 
before {:type :obj, :class-name kuk, :super {}, :slots {}, :private true}
{:type :obj, :class-name kuk, :super {}, :slots {}, :private true}
nil
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12513/fn--12514]},
 :main {:command-query :query, :function #function[object-model.core/eval12544/fn--12545]}}
clj꞉object-model.core꞉> 
c c's b b a before c
c's b a before b
d before d
a before a
will call next methods
c's b a
d
a
; Execution error (NullPointerException) at object-model.core/call-next-method (form-init15429976516508478812.clj:464).
; Cannot invoke "clojure.lang.IFn.invoke()" because the return value of "clojure.lang.IFn.invoke(Object)" is null
clj꞉object-model.core꞉> 
{:before {:command-query :query, :function #function[object-model.core/eval12513/fn--12514]},
 :main {:command-query :query, :function #function[object-model.core/eval12552/fn--12553]}}
clj꞉object-model.core꞉> 
#'object-model.core/obj2
clj꞉object-model.core꞉> 
; Execution error (ArityException) at object-model.core/dispatch-method (form-init15429976516508478812.clj:445).
; Wrong number of args (2) passed to: object-model.core/eval12640/fn--12641
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
#function[clojure.core/partial/fn--5908]
; Execution error (ArityException) at object-model.core/dispatch-method (form-init15429976516508478812.clj:445).
; Wrong number of args (2) passed to: object-model.core/eval12640/fn--12641
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12738/fn--12739]}}
clj꞉object-model.core꞉> 
child1 base2
nil
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12744/fn--12745]}}
clj꞉object-model.core꞉> 
will print order
child1 base2
base1 child2
nil
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12750/fn--12751]}}
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12754/fn--12755]}}
clj꞉object-model.core꞉> 
base1 and number 1
nil
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12760/fn--12761]}}
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/dispatch-method (form-init15429976516508478812.clj:444).
; Cannot invoke "clojure.lang.IFn.invoke()" because "main_function" is null
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12766/fn--12767]}}
clj꞉object-model.core꞉> 
base1 and number 1
nil
clj꞉object-model.core꞉> 
base1 and [1 2 3]
nil
clj꞉object-model.core꞉> 
base1 and number 1
nil
clj꞉object-model.core꞉> 
{:main {:command-query :command, :function #function[object-model.core/eval12807/fn--12808]}}
clj꞉object-model.core꞉> 
[false #ref[{:status :ready, :val default} 0x177f801e]]
changed value
nil
clj꞉object-model.core꞉> 
; Execution error (NullPointerException) at object-model.core/get-value (form-init15429976516508478812.clj:217).
; Cannot invoke "java.util.concurrent.Future.get()" because "fut" is null
clj꞉object-model.core꞉> 
{child2 {:type :class, :name child2, :parents (base2), :public-slots (), :slots {}},
 child {:type :class, :name child, :parents (base), :public-slots (), :slots {}},
 base {:type :class, :name base, :parents (), :public-slots (), :slots {}},
 kuk {:type :class, :name kuk, :parents (), :public-slots (), :slots {}},
 child1 {:type :class, :name child1, :parents (base1), :public-slots (), :slots {}},
 a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (),
  :slots {a {:type :slot, :name a, :access :private, :default "a"}}},
 base1 {:type :class, :name base1, :parents (), :public-slots (), :slots {}},
 base2 {:type :class, :name base2, :parents (), :public-slots (), :slots {}},
 c
 {:type :class,
  :name c,
  :parents (b d),
  :public-slots (),
  :slots
  {b {:type :slot, :name b, :access :private, :default "c's b"},
   c {:type :slot, :name c, :access :private, :default "c"}}},
 class
 {:type :class,
  :name class,
  :parents (),
  :public-slots (a),
  :slots {a {:type :slot, :name a, :access :public, :default "default"}}},
 b
 {:type :class,
  :name b,
  :parents (a),
  :public-slots (),
  :slots {b {:type :slot, :name b, :access :private, :default "b"}}},
 d
 {:type :class,
  :name d,
  :parents (),
  :public-slots (),
  :slots {d {:type :slot, :name d, :access :private, :default "d"}}}}
clj꞉object-model.core꞉> 
changed value
nil
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val changed value} 0x177f801e]]
changed value
nil
clj꞉object-model.core꞉> 
changed value
nil
clj꞉object-model.core꞉> 
#'object-model.core/class-object
clj꞉object-model.core꞉> 
default
nil
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val default} 0x6997bd1f]]
changed value
nil
clj꞉object-model.core꞉> 
default
nil
clj꞉object-model.core꞉> 
#'object-model.core/create-function
clj꞉object-model.core꞉> 
{child2 {:type :class, :name child2, :parents (base2), :public-slots (), :slots {}},
 child {:type :class, :name child, :parents (base), :public-slots (), :slots {}},
 base {:type :class, :name base, :parents (), :public-slots (), :slots {}},
 kuk {:type :class, :name kuk, :parents (), :public-slots (), :slots {}},
 child1 {:type :class, :name child1, :parents (base1), :public-slots (), :slots {}},
 a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (),
  :slots {a {:type :slot, :name a, :access :private, :default "a"}}},
 base1 {:type :class, :name base1, :parents (), :public-slots (), :slots {}},
 base2 {:type :class, :name base2, :parents (), :public-slots (), :slots {}},
 c
 {:type :class,
  :name c,
  :parents (b d),
  :public-slots (),
  :slots
  {b {:type :slot, :name b, :access :private, :default "c's b"},
   c {:type :slot, :name c, :access :private, :default "c"}}},
 class
 {:type :class,
  :name class,
  :parents (),
  :public-slots (a),
  :slots {a {:type :slot, :name a, :access :public, :default "default"}}},
 b
 {:type :class,
  :name b,
  :parents (a),
  :public-slots (),
  :slots {b {:type :slot, :name b, :access :private, :default "b"}}},
 d
 {:type :class,
  :name d,
  :parents (),
  :public-slots (),
  :slots {d {:type :slot, :name d, :access :private, :default "d"}}}}
clj꞉object-model.core꞉> 
#'object-model.core/class-object
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12831/fn--12832]}}
clj꞉object-model.core꞉> 
{:main {:command-query :command, :function #function[object-model.core/eval12837/fn--12838]}}
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val default} 0x106fba7b]]
changed value
nil
clj꞉object-model.core꞉> 
default
nil
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val default} 0x2b97921]]
changed value
nil
clj꞉object-model.core꞉> 
changed value
nil
clj꞉object-model.core꞉> 
#'object-model.core/dispatch-method
clj꞉object-model.core꞉> 
[true #ref[{:status :ready, :val changed value} 0x7175cf61]]
changed value
nil
clj꞉object-model.core꞉> 
#'object-model.core/set-value
clj꞉object-model.core꞉> 
{child2 {:type :class, :name child2, :parents (base2), :public-slots (), :slots {}},
 child {:type :class, :name child, :parents (base), :public-slots (), :slots {}},
 base {:type :class, :name base, :parents (), :public-slots (), :slots {}},
 kuk {:type :class, :name kuk, :parents (), :public-slots (), :slots {}},
 child1 {:type :class, :name child1, :parents (base1), :public-slots (), :slots {}},
 a
 {:type :class,
  :name a,
  :parents (),
  :public-slots (),
  :slots {a {:type :slot, :name a, :access :private, :default "a"}}},
 base1 {:type :class, :name base1, :parents (), :public-slots (), :slots {}},
 base2 {:type :class, :name base2, :parents (), :public-slots (), :slots {}},
 c
 {:type :class,
  :name c,
  :parents (b d),
  :public-slots (),
  :slots
  {b {:type :slot, :name b, :access :private, :default "c's b"},
   c {:type :slot, :name c, :access :private, :default "c"}}},
 class
 {:type :class,
  :name class,
  :parents (),
  :public-slots (a),
  :slots {a {:type :slot, :name a, :access :public, :default "default"}}},
 b
 {:type :class,
  :name b,
  :parents (a),
  :public-slots (),
  :slots {b {:type :slot, :name b, :access :private, :default "b"}}},
 d
 {:type :class,
  :name d,
  :parents (),
  :public-slots (),
  :slots {d {:type :slot, :name d, :access :private, :default "d"}}}}
clj꞉object-model.core꞉> 
#'object-model.core/class-object
clj꞉object-model.core꞉> 
{:main {:command-query :query, :function #function[object-model.core/eval12906/fn--12907]}}
clj꞉object-model.core꞉> 
{:main {:command-query :command, :function #function[object-model.core/eval12912/fn--12913]}}
clj꞉object-model.core꞉> 
changed value
nil
clj꞉object-model.core꞉> 
default
nil
clj꞉object-model.core꞉> 
changed value
nil
clj꞉object-model.core꞉> 
changed value
nil
clj꞉object-model.core꞉> 
"1232"
clj꞉object-model.core-test꞉> 
